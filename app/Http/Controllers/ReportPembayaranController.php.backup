<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\PembayaranOb;
use App\Models\PembayaranUangMuka;
use App\Models\PembayaranPranotaSupir;
use App\Models\PembayaranPranotaKontainer;
use App\Models\PembayaranPranotaCat;
use App\Models\PembayaranPranotaPerbaikanKontainer;
use App\Models\PembayaranAktivitasLainnya;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class ReportPembayaranController extends Controller
{
    /**
     * Get relationships to load based on payment type
     */
    private function getRelationships($key, $model)
    {
        $relationships = [];

        // Check if model has pembuatPembayaran relationship
        if (method_exists($model, 'pembuatPembayaran')) {
            $relationships[] = 'pembuatPembayaran';
        }

        // Only PembayaranOb and PembayaranDpOb have kasBankAkun relationship
        if (in_array($key, ['ob', 'dp'])) {
            $relationships[] = 'kasBankAkun';
        }

        // PembayaranAktivitasLainnya has bank relationship
        if ($key === 'aktivitas_lainnya') {
            $relationships[] = 'bank';
        }

        // Check if model has penyetujuPembayaran relationship
        if (method_exists($model, 'penyetujuPembayaran')) {
            $relationships[] = 'penyetujuPembayaran';
        }

        return $relationships;
    }

    public function index(Request $request)
    {
        // Default date range (current month)
        $startDate = $request->get('start_date', now()->startOfMonth()->format('Y-m-d'));
        $endDate = $request->get('end_date', now()->endOfMonth()->format('Y-m-d'));
        $jenisPembayaran = $request->get('jenis_pembayaran', 'all');
        $status = $request->get('status', 'all');

        $allPembayaran = collect();
        $summary = [
            'total_pembayaran' => 0,
            'total_transaksi' => 0,
            'breakdown' => []
        ];

        // Array semua model pembayaran dengan label dan kolom tanggal
        $paymentModels = [
            'ob' => ['model' => PembayaranOb::class, 'label' => 'Pembayaran OB', 'date_column' => 'tanggal_pembayaran'],
            'uang_muka' => ['model' => PembayaranUangMuka::class, 'label' => 'Pembayaran Uang Muka', 'date_column' => 'tanggal_pembayaran'],
            'pranota_supir' => ['model' => PembayaranPranotaSupir::class, 'label' => 'Pembayaran Pranota Supir', 'date_column' => 'tanggal_pembayaran'],
            'pranota_kontainer' => ['model' => PembayaranPranotaKontainer::class, 'label' => 'Pembayaran Pranota Kontainer', 'date_column' => 'tanggal_pembayaran'],
            'pranota_cat' => ['model' => PembayaranPranotaCat::class, 'label' => 'Pembayaran Pranota CAT', 'date_column' => 'tanggal_kas'],
            'pranota_perbaikan' => ['model' => PembayaranPranotaPerbaikanKontainer::class, 'label' => 'Pembayaran Pranota Perbaikan', 'date_column' => 'tanggal_pembayaran'],
            'aktivitas_lainnya' => ['model' => PembayaranAktivitasLainnya::class, 'label' => 'Pembayaran Aktivitas Lainnya', 'date_column' => 'tanggal_pembayaran']
        ];

        foreach ($paymentModels as $key => $config) {
            if ($jenisPembayaran === 'all' || $jenisPembayaran === $key) {
                $model = $config['model'];

                // Different models have different relationships
                $relationships = ['pembuatPembayaran'];

                // Only PembayaranOb and PembayaranDpOb have kasBankAkun relationship
                if (in_array($key, ['ob', 'dp'])) {
                    $relationships[] = 'kasBankAkun';
                }

                // PembayaranAktivitasLainnya has bank relationship
                if ($key === 'aktivitas_lainnya') {
                    $relationships[] = 'bank';
                }

                // Check if model has penyetujuPembayaran relationship
                if (method_exists($model, 'penyetujuPembayaran')) {
                    $relationships[] = 'penyetujuPembayaran';
                }

                $query = $model::with($relationships)
                    ->whereBetween($config['date_column'], [$startDate, $endDate]);

                // Filter berdasarkan status jika diperlukan
                if ($status !== 'all') {
                    $query->where('status', $status);
                }

                $pembayaran = $query->get();

                // Tambahkan label jenis untuk setiap item
                $pembayaran = $pembayaran->map(function ($item) use ($config) {
                    $item->jenis_label = $config['label'];
                    return $item;
                });

                $allPembayaran = $allPembayaran->merge($pembayaran);

                // Summary per jenis
                $summary['breakdown'][$key] = [
                    'label' => $config['label'],
                    'total' => $pembayaran->sum('total_pembayaran'),
                    'count' => $pembayaran->count()
                ];
            }
        }

        // Urutkan berdasarkan tanggal
        $allPembayaran = $allPembayaran->sortBy(function ($item) {
            return $item->tanggal_pembayaran ?? $item->tanggal_kas ?? '1900-01-01';
        });

        // Total summary
        $summary['total_pembayaran'] = $allPembayaran->sum('total_pembayaran');
        $summary['total_transaksi'] = $allPembayaran->count();

        return view('report.pembayaran.index', compact(
            'allPembayaran',
            'summary',
            'startDate',
            'endDate',
            'jenisPembayaran',
            'status',
            'paymentModels'
        ));
    }

    public function export(Request $request)
    {
        $startDate = $request->get('start_date', now()->startOfMonth()->format('Y-m-d'));
        $endDate = $request->get('end_date', now()->endOfMonth()->format('Y-m-d'));
        $jenisPembayaran = $request->get('jenis_pembayaran', 'all');
        $status = $request->get('status', 'all');

        $allPembayaran = collect();

        // Array semua model pembayaran dengan label dan kolom tanggal (sama dengan index)
        $paymentModels = [
            'ob' => ['model' => PembayaranOb::class, 'label' => 'Pembayaran OB', 'date_column' => 'tanggal_pembayaran'],
            'dp' => ['model' => PembayaranDpOb::class, 'label' => 'Pembayaran DP', 'date_column' => 'tanggal_pembayaran'],
            'pranota_supir' => ['model' => PembayaranPranotaSupir::class, 'label' => 'Pembayaran Pranota Supir', 'date_column' => 'tanggal_pembayaran'],
            'pranota_kontainer' => ['model' => PembayaranPranotaKontainer::class, 'label' => 'Pembayaran Pranota Kontainer', 'date_column' => 'tanggal_pembayaran'],
            'pranota_cat' => ['model' => PembayaranPranotaCat::class, 'label' => 'Pembayaran Pranota CAT', 'date_column' => 'tanggal_kas'],
            'pranota_perbaikan' => ['model' => PembayaranPranotaPerbaikanKontainer::class, 'label' => 'Pembayaran Pranota Perbaikan', 'date_column' => 'tanggal_pembayaran'],
            'aktivitas_lainnya' => ['model' => PembayaranAktivitasLainnya::class, 'label' => 'Pembayaran Aktivitas Lainnya', 'date_column' => 'tanggal_pembayaran']
        ];

        foreach ($paymentModels as $key => $config) {
            if ($jenisPembayaran === 'all' || $jenisPembayaran === $key) {
                $model = $config['model'];

                // Different models have different relationships
                $relationships = ['pembuatPembayaran'];

                // Only PembayaranOb and PembayaranDpOb have kasBankAkun relationship
                if (in_array($key, ['ob', 'dp'])) {
                    $relationships[] = 'kasBankAkun';
                }

                // Check if model has penyetujuPembayaran relationship
                if (method_exists($model, 'penyetujuPembayaran')) {
                    $relationships[] = 'penyetujuPembayaran';
                }

                $query = $model::with($relationships)
                    ->whereBetween($config['date_column'], [$startDate, $endDate]);

                if ($status !== 'all') {
                    $query->where('status', $status);
                }

                $pembayaran = $query->get();

                // Tambahkan label jenis untuk setiap item
                $pembayaran = $pembayaran->map(function ($item) use ($config) {
                    $item->jenis_label = $config['label'];
                    return $item;
                });

                $allPembayaran = $allPembayaran->merge($pembayaran);
            }
        }

        $allPembayaran = $allPembayaran->sortBy(function ($item) {
            return $item->tanggal_pembayaran ?? $item->tanggal_kas ?? '1900-01-01';
        });

        $filename = 'report_pembayaran_' . $startDate . '_to_' . $endDate . '.csv';

        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => 'attachment; filename="' . $filename . '"',
        ];

        $callback = function() use ($allPembayaran) {
            $handle = fopen('php://output', 'w');

            // Write UTF-8 BOM
            fwrite($handle, chr(0xEF) . chr(0xBB) . chr(0xBF));

            // Header columns
            fputcsv($handle, [
                'No',
                'Tanggal',
                'Nomor Pembayaran',
                'Jenis',
                'Total Pembayaran',
                'Akun Kas/Bank',
                'Status',
                'Dibuat Oleh',
                'Disetujui Oleh',
                'Keterangan'
            ], ';');

            // Data rows
            foreach ($allPembayaran as $index => $item) {
                fputcsv($handle, [
                    $index + 1,
                    isset($item->tanggal_pembayaran) ? Carbon::parse($item->tanggal_pembayaran)->format('d/m/Y') : (isset($item->tanggal_kas) ? Carbon::parse($item->tanggal_kas)->format('d/m/Y') : '-'),
                    $item->nomor_pembayaran,
                    $item->jenis_label ?? 'Unknown',
                    number_format((float)($item->total_pembayaran ?? $item->nominal_pembayaran ?? 0), 0, ',', '.'),
                    isset($item->kasBankAkun) && $item->kasBankAkun ? ($item->kasBankAkun->nomor_akun . ' - ' . $item->kasBankAkun->nama_akun) : (isset($item->bank) && is_object($item->bank) && $item->bank ? ($item->bank->nomor_akun . ' - ' . $item->bank->nama_akun) : (isset($item->bank) && is_string($item->bank) ? $item->bank : '-')),
                    ucfirst($item->status ?? 'pending'),
                    (isset($item->pembuatPembayaran) && $item->pembuatPembayaran) ? $item->pembuatPembayaran->name : '-',
                    $item->penyetujuPembayaran ? $item->penyetujuPembayaran->name : '-',
                    $item->keterangan ?? '-'
                ], ';');
            }

            fclose($handle);
        };

        return response()->stream($callback, 200, $headers);
    }

    public function print(Request $request)
    {
        $startDate = $request->get('start_date', now()->startOfMonth()->format('Y-m-d'));
        $endDate = $request->get('end_date', now()->endOfMonth()->format('Y-m-d'));
        $jenisPembayaran = $request->get('jenis_pembayaran', 'all');
        $status = $request->get('status', 'all');

        $allPembayaran = collect();
        $summary = [
            'total_pembayaran' => 0,
            'total_transaksi' => 0,
            'breakdown' => []
        ];

        // Array semua model pembayaran dengan label dan kolom tanggal (sama dengan index)
        $paymentModels = [
            'ob' => ['model' => PembayaranOb::class, 'label' => 'Pembayaran OB', 'date_column' => 'tanggal_pembayaran'],
            'dp' => ['model' => PembayaranDpOb::class, 'label' => 'Pembayaran DP', 'date_column' => 'tanggal_pembayaran'],
            'pranota_supir' => ['model' => PembayaranPranotaSupir::class, 'label' => 'Pembayaran Pranota Supir', 'date_column' => 'tanggal_pembayaran'],
            'pranota_kontainer' => ['model' => PembayaranPranotaKontainer::class, 'label' => 'Pembayaran Pranota Kontainer', 'date_column' => 'tanggal_pembayaran'],
            'pranota_cat' => ['model' => PembayaranPranotaCat::class, 'label' => 'Pembayaran Pranota CAT', 'date_column' => 'tanggal_kas'],
            'pranota_perbaikan' => ['model' => PembayaranPranotaPerbaikanKontainer::class, 'label' => 'Pembayaran Pranota Perbaikan', 'date_column' => 'tanggal_pembayaran'],
            'aktivitas_lainnya' => ['model' => PembayaranAktivitasLainnya::class, 'label' => 'Pembayaran Aktivitas Lainnya', 'date_column' => 'tanggal_pembayaran']
        ];

        foreach ($paymentModels as $key => $config) {
            if ($jenisPembayaran === 'all' || $jenisPembayaran === $key) {
                $model = $config['model'];

                // Different models have different relationships
                $relationships = ['pembuatPembayaran'];

                // Only PembayaranOb and PembayaranDpOb have kasBankAkun relationship
                if (in_array($key, ['ob', 'dp'])) {
                    $relationships[] = 'kasBankAkun';
                }

                // Check if model has penyetujuPembayaran relationship
                if (method_exists($model, 'penyetujuPembayaran')) {
                    $relationships[] = 'penyetujuPembayaran';
                }

                $query = $model::with($relationships)
                    ->whereBetween($config['date_column'], [$startDate, $endDate]);

                if ($status !== 'all') {
                    $query->where('status', $status);
                }

                $pembayaran = $query->get();

                // Tambahkan label jenis untuk setiap item
                $pembayaran = $pembayaran->map(function ($item) use ($config) {
                    $item->jenis_label = $config['label'];
                    return $item;
                });

                $allPembayaran = $allPembayaran->merge($pembayaran);

                // Summary per jenis
                $summary['breakdown'][$key] = [
                    'label' => $config['label'],
                    'total' => $pembayaran->sum('total_pembayaran'),
                    'count' => $pembayaran->count()
                ];
            }
        }

        $allPembayaran = $allPembayaran->sortBy(function ($item) {
            return $item->tanggal_pembayaran ?? $item->tanggal_kas ?? '1900-01-01';
        });

        // Total summary
        $summary['total_pembayaran'] = $allPembayaran->sum('total_pembayaran');
        $summary['total_transaksi'] = $allPembayaran->count();

        return view('report.pembayaran.print', compact(
            'allPembayaran',
            'summary',
            'startDate',
            'endDate',
            'jenisPembayaran',
            'status',
            'paymentModels'
        ));
    }
}
